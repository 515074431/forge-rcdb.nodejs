////////////////////////////////////////////////////////////////
// ConfigManager API
//
/////////////////////////////////////////////////////////////////
import ClientAPI from 'ClientAPI'

export default class MetaAPI extends ClientAPI {

  ///////////////////////////////////////////////////////////////
  // Class constructor
  //
  ///////////////////////////////////////////////////////////////
  constructor (apiUrl) {

    super (apiUrl)
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  getModelMetaProperties () {

    const url = this.apiUrl + '/all'

    return this.ajax(url)
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  getNodeMetaProperties (dbId) {

    const url = this.apiUrl + `/${dbId}/properties`

    return this.ajax(url)
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  getNodeMetaProperty (metaId) {

    const url = this.apiUrl + `/properties/${metaId}`

    return this.ajax(url)
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  addNodeMetaProperty (metaProperty) {

    const payload = {
      metaProperty
    }

    const url = this.apiUrl + '/properties'

    return this.ajax({
      url: url,
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      data: JSON.stringify(payload)
    })
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  updateNodeMetaProperty (metaProperty) {

    const payload = {
      metaProperty
    }

    const url = this.apiUrl + '/properties'

    return this.ajax({
      url: url,
      method: 'PUT',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      data: JSON.stringify(payload)
    })
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  deleteNodeMetaProperty (metaId) {

    const url = this.apiUrl + `/properties/${metaId}`

    return this.ajax({
      url: url,
      method: 'DELETE'
    })
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  uploadResource (resourceId, file, opts = {}) {

    const url = this.apiUrl + `/resources/${resourceId}`

    const options = Object.assign({}, {
      tag: 'metaFile'
    }, opts)

    return super.upload (url, file, options)
  }

  ///////////////////////////////////////////////////////////////
  //
  //
  ///////////////////////////////////////////////////////////////
  deleteResource (resourceId) {

    const url = this.apiUrl + `/resources/${resourceId}`

    return this.ajax({
      url: url,
      method: 'DELETE'
    })
  }
}
